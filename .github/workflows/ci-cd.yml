name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint and Test
        run: |
          echo "No tests implemented"  # Replace this with actual test commands if any

  test:
    name: Deploy to Docker Compose
    runs-on: ubuntu-latest
    needs: build
    env:
      PORT: 5000
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_USER: catgif_user
      DATABASE_PASSWORD: catgif_password
      DATABASE_NAME: catgif_db
      MYSQL_ROOT_PASSWORD: yourpassword
      MYSQL_DATABASE: catgif_db
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Stage: Build Docker Image"
          docker-compose build

      - name: Test Application with curl
        run: |
          echo "Stage: Test Application with curl"
          docker-compose up -d
          sleep 10
          curl -f http://localhost:5000 && echo "Curl test worked!" || (echo "Curl test failed!" && exit 1)
          docker-compose down

      - name: Push Docker Image
        run: |
          echo "Stage: Push Docker Image"
          docker-compose push 

      - name: Deploy Application
        run: |
          docker-compose down
          docker-compose up -d

  deploy:
    name: Deploy to EC2 with Terraform
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # Replace with the desired Terraform version

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Plan
        id: apply
        run: |
          terraform apply -auto-approve
          echo "PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV
          

      - name: Save SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Install Docker and Docker Compose on EC2
        run: |
          echo "Stage: Install Docker and Docker Compose on EC2"
          ssh -o StrictHostKeyChecking=no -T -i ec2-key.pem ec2-user@$PUBLIC_IP << 'EOF'
          set -e
          mkdir -p ~/app
          chmod 755 ~/app
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "Docker and Docker Compose installed."
          EOF

      - name: Deploy Application on EC2
        run: |
          echo "Stage: Deploy Application on EC2"
          scp -o StrictHostKeyChecking=no -i ec2-key.pem docker-compose.yaml ec2-user@${{ steps.apply.outputs.public_ip }}:~/app/
          ssh -o StrictHostKeyChecking=no -T -i ec2-key.pem ec2-user@${{ steps.apply.outputs.public_ip }} << 'EOF'
          set -e
          cd ~/app
          docker-compose pull
          docker-compose down
          docker-compose up -d
          echo "Deployment complete!"
          EOF