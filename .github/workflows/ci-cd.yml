name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint and Test
        run: |
          echo "No tests implemented"  # Replace with actual test commands if any

  test:
    name: Deploy to Docker Compose
    runs-on: ubuntu-22.04
    needs: build
    env:
      PORT: 5000
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_USER: catgif_user
      DATABASE_PASSWORD: catgif_password
      DATABASE_NAME: catgif_db
      MYSQL_ROOT_PASSWORD: yourpassword
      MYSQL_DATABASE: catgif_db
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Stage: Build Docker Image"
          docker-compose build

      - name: Test Application with curl
        run: |
          echo "Stage: Test Application with curl"
          docker-compose up -d
          sleep 10
          curl -f http://localhost:5000 && echo "Curl test worked!" || (echo "Curl test failed!" && exit 1)
          docker-compose down

      - name: Push Docker Image
        run: |
          echo "Stage: Push Docker Image"
          docker-compose push 

      - name: Deploy Application
        run: |
          docker-compose down
          docker-compose up -d

  setup-gcloud:
    name: Setup Google Cloud SDK
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # ðŸ”¹ Install Google Cloud SDK (MUST come before authentication) // Ensures gcloud CLI is available
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY_2 }}
          export_default_credentials: true

      # ðŸ”¹ Verify installation to ensure gcloud is available // Confirms that gcloud is installed correctly
      - name: Verify gcloud Installation
        run: gcloud --version

      # ðŸ”¹ Authenticate with Google Cloud using the service account // Ensures a valid active account is used before running any gcloud commands
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}

      # ðŸ”¹ Confirm authentication was successful // fix for "You do not currently have an active account selected" error
      - name: Confirm Active Account
        run: gcloud auth list --format="value(account)"

      # ðŸ”¹ Set the correct project and region AFTER authentication // Ensures gcloud recognizes the credentials before setting configurations
      - name: Set Project and Region
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/region ${{ secrets.GKE_CLUSTER_REGION }}

      # ðŸ”¹ Debugging step to confirm authentication and configuration // Prints current GCP settings
      - name: Debug GCP Config
        run: gcloud config list


  configure-kubectl:
    name: Configure kubectl for GKE
    runs-on: ubuntu-22.04
    needs: setup-gcloud
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}
          export_default_credentials: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install gke-gcloud-auth-plugin  # ðŸ”¹ FIX: Install the missing plugin... THIS BITCH TOOK FOREVER TO FIND
        run: |
          echo "Removing old Google Cloud key (if any)..."
          sudo rm -f /usr/share/keyrings/cloud.google.gpg

          echo "Adding Google Cloud SDK public key..."
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg

          echo "Adding Google Cloud SDK repository..."
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list

          echo "Updating package lists..."
          sudo apt-get update

          echo "Installing Google Cloud CLI and gke-gcloud-auth-plugin..."
          sudo apt-get install -y google-cloud-cli google-cloud-sdk-gke-gcloud-auth-plugin



      - name: Configure kubectl   # ðŸ”¹"gcloud auth list" is for debugging, to confirm authentication
        run: |
          gcloud auth list    
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_CLUSTER_REGION }}
          kubectl version --client
          kubectl cluster-info

  deploy:
    name: Deploy to GKE with Terraform
    runs-on: ubuntu-22.04
    needs: [test, configure-kubectl]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create GCP Credentials File
        run: |
          echo '${{ secrets.GCP_SA_KEY_2 }}' > gcp-key.json

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}
          export_default_credentials: true

      - name: Get GKE Credentials # ðŸ”¹"gcloud auth list" is for debugging, to confirm authentication
        run: |
          gcloud auth list
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_CLUSTER_REGION }}

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Plan
        env:
          TF_VAR_database_host: ${{ secrets.DATABASE_HOST }}
          TF_VAR_database_port: ${{ secrets.DATABASE_PORT }}
          TF_VAR_database_user: ${{ secrets.DATABASE_USER }}
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
          TF_VAR_mysql_root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}
          TF_VAR_iam_user_name: ${{ secrets.IAM_USER_NAME }}
          TF_VAR_mysql_database: ${{ secrets.MYSQL_DATABASE }}
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_credentials_path: gcp-key.json
        run: |
          terraform plan
          terraform apply -auto-approve

      - name: Wait for Cluster Readiness
        run: |
          for i in {1..10}; do
            gcloud container clusters describe ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_CLUSTER_REGION }} \
              --format='value(status)' | grep -q "RUNNING" && break
            echo "Waiting for cluster to be ready..."
            sleep 10
          done

      - name: Apply Kubernetes Manifests
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_CLUSTER_REGION }}
          kubectl apply -f k8s/