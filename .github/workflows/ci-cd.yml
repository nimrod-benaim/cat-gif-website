name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        run: echo "Stage: Checkout Code"

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
        run: echo "Stage: Set up Python"

      # Step 3: Install Python dependencies
      - name: Install Dependencies
        run: |
          echo "Stage: Install Dependencies"
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Lint and test the code
      - name: Lint and Test
        run: |
          echo "Stage: Lint and Test"
          # Run linters or tests here if you have them
          echo "No tests implemented"  # Replace with actual test commands if any
      # Replace with actual test commands if any  

  deploy:
    name: Deploy to Docker Compose
    runs-on: ubuntu-latest
    needs: build
    env:  # Environment variables set globally for the deploy job
      PORT: 5000
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_USER: catgif_user
      DATABASE_PASSWORD: catgif_password
      DATABASE_NAME: catgif_db
      MYSQL_ROOT_PASSWORD: yourpassword
      MYSQL_DATABASE: catgif_db
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
        run: echo "Stage: Checkout Code"

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        run: echo "Stage: Set up Docker"

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          echo "Stage: Install Docker Compose"
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "Stage: Log in to DockerHub"

      # Step 5: Build the Docker image
      - name: Build Docker Image
        run: |
          echo "Stage: Build Docker Image"
          docker-compose build

      # Step 6: Run a curl test on the built image
      - name: Test Application with curl
        run: |
          echo "Stage: Test Application with curl"
          docker-compose up -d
          sleep 10  # Allow time for the app to start
          curl -f http://localhost:5000 || (echo "Curl test failed!" && exit 1)
          docker-compose down

      # Step 7: Push the Docker image to DockerHub
      - name: Push Docker Image
        run: |
          echo "Stage: Push Docker Image"
          docker-compose push

      # Step 8: Deploy the application
      - name: Deploy Application
        run: |
          echo "Stage: Deploy Application"
          docker-compose down
          docker-compose up -d
