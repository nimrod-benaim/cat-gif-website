# Name of the GitHub Actions workflow
name: CI/CD

# Define triggers for the workflow
on:
  push:
    branches:
      - main               # Trigger when there is a push to the main branch
  pull_request:
    branches:
      - main               # Trigger when a pull request targets the main branch

# Global environment variables for the workflow
env:
  # Dynamically generate a version tag for each run (e.g. ver-12, ver-13, etc.)
  IMAGE_VERSION: ver-${{ github.run_number }}  # Uses GitHub's run number to create a unique version

jobs:
  # Job to build, test, and push the Docker image, then deploy the application
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-22.04               # Run on Ubuntu 22.04 runner
    env:
      PORT: 5000                      # Port for the Flask application
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}       # Database host from secrets
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}       # Database port from secrets
      DATABASE_USER: ${{ secrets.DATABASE_USER }}       # Database user from secrets
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}  # Database password from secrets
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}       # Database name from secrets
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}  # MySQL root password from secrets
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}     # MySQL initial database name from secrets

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3     # Checkout the repository code

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2   # Set up Docker Buildx for advanced build features

      - name: Install Docker Compose
        run: |
          sudo apt-get update                           # Update package lists
          sudo apt-get install -y docker-compose        # Install Docker Compose

      - name: Log in to DockerHub
        uses: docker/login-action@v2    # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}      # Docker Hub username from secrets
          password: ${{ secrets.DOCKER_PASSWORD }}      # Docker Hub password from secrets

      - name: Inject dynamic version into files
        run: |
          # Replace the IMAGE_VERSION_PLACEHOLDER with the dynamic IMAGE_VERSION in docker-compose.yaml
          sed -i "s|IMAGE_VERSION_PLACEHOLDER|${IMAGE_VERSION}|g" docker-compose.yaml
          # Similarly replace the placeholder in catgif/values.yaml
          sed -i "s|IMAGE_VERSION_PLACEHOLDER|${IMAGE_VERSION}|g" catgif/values.yaml

      - name: Build and Push Docker Image
        run: |
          echo "Stage: Build Docker Image"
          docker-compose build         # Build the Docker image using docker-compose

      - name: Test Application with curl
        run: |
          echo "Stage: Test Application with curl"
          docker-compose up -d         # Start the containers in detached mode
          sleep 10                     # Wait 10 seconds for services to initialize
          # Test the application endpoint; if curl fails, exit with error
          curl -f http://localhost:5000 && echo "Curl test worked!" || (echo "Curl test failed!" && exit 1)
          docker-compose down          # Shut down the containers

      - name: Push Docker Image
        run: |
          echo "Stage: Push Docker Image"
          docker-compose push          # Push the built Docker image to Docker Hub

      - name: Deploy Application
        run: |
          docker-compose down          # Ensure any previous deployment is stopped
          docker-compose up -d         # Deploy the application in detached mode

  # Job to set up the Google Cloud SDK
  setup-gcloud:
    name: Setup Google Cloud SDK
    runs-on: ubuntu-22.04               # Run on Ubuntu 22.04 runner
    needs: build_and_test              # This job runs after the build_and_test job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3       # Checkout the repository code

      # Install the Google Cloud SDK (required before authentication)
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1  # Set up Google Cloud SDK
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}     # GCP Project ID from secrets
          service_account_key: ${{ secrets.GCP_SA_KEY_2 }}  # Service account key from secrets
          export_default_credentials: true              # Export credentials for gcloud CLI

      # Verify that the Google Cloud SDK is installed correctly
      - name: Verify gcloud Installation
        run: gcloud --version          # Print the gcloud version

      # Authenticate with Google Cloud using the service account credentials
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1           # Authenticate with Google Cloud
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}  # Provide service account key

      # Confirm that authentication was successful by listing active accounts
      - name: Confirm Active Account
        run: gcloud auth list --format="value(account)"  # List active gcloud accounts

      # Set the GCP project and region configuration
      - name: Set Project and Region
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}      # Set the GCP project
          gcloud config set compute/region ${{ secrets.GKE_CLUSTER_REGION }}  # Set the compute region

      # Debugging step to list current gcloud configuration
      - name: Debug GCP Config
        run: gcloud config list       # Output current configuration

  # Job to configure kubectl for interacting with GKE (Google Kubernetes Engine)
  configure-kubectl:
    name: Configure kubectl for GKE
    runs-on: ubuntu-22.04               # Run on Ubuntu 22.04 runner
    needs: setup-gcloud                # This job depends on the setup-gcloud job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3       # Checkout repository code

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1  # Authenticate with Google Cloud
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}   # Service account key from secrets
          export_default_credentials: true

      - name: Install kubectl (Google Cloud)
        run: |
          # Download the latest stable release of kubectl
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl                   # Make kubectl executable
          sudo mv kubectl /usr/local/bin/      # Move kubectl to a directory in PATH
          kubectl version --client            # Verify installation by showing client version

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1  # Set up Google Cloud SDK for further configuration
        with:
          project_id: ${{ secrets.GCP_PROJECT }}         # GCP Project ID (alternate secret)
          service_account_key: ${{ secrets.GCP_SA_KEY }}     # Alternate service account key
          export_default_credentials: true

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin  # Install the GKE authentication plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc  # Set environment variable permanently
          source ~/.bashrc                 # Reload bashrc to apply the change

      - name: Verify Plugin Installation
        run: gke-gcloud-auth-plugin --version  # Check the installed version of the GKE auth plugin

  # Job to deploy the application to GKE using Terraform and Helm
  deploy:
    name: Deploy to GKE with Terraform
    runs-on: ubuntu-22.04               # Run on Ubuntu 22.04 runner
    needs: configure-kubectl           # This job depends on the configure-kubectl job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3       # Checkout repository code

      - name: Create GCP Credentials File
        run: |
          # Write the GCP service account key to a file for Terraform to use
          echo '${{ secrets.GCP_SA_KEY_2 }}' > gcp-key.json

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1  # Authenticate using Google Cloud action
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}  # Service account key from secrets
          export_default_credentials: true

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1  # Set up the Google Cloud SDK
        with:
          project_id: ${{ secrets.GCP_PROJECT }}          # GCP project from secrets
          service_account_key: ${{ secrets.GCP_SA_KEY }}      # Service account key from secrets
          export_default_credentials: true

      - name: Install GKE Auth Plugin
        run: gcloud components install gke-gcloud-auth-plugin  # Install GKE auth plugin

      - name: Verify Plugin Installation
        run: gke-gcloud-auth-plugin --version  # Verify installation of the plugin

      - name: Initialize Terraform
        run: terraform init         # Initialize Terraform configuration

      - name: Install Helm
        run: |
          # Download and install Helm (Kubernetes package manager)
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh         # Make the script executable
          ./get_helm.sh                # Run the script to install Helm

      - name: Verify Helm Installation
        run: helm version             # Check the installed version of Helm

      - name: Apply Terraform Plan
        env:
          # Pass Terraform variables using values from secrets and files
          TF_VAR_database_host: ${{ secrets.DATABASE_HOST }}
          TF_VAR_database_port: ${{ secrets.DATABASE_PORT }}
          TF_VAR_database_user: ${{ secrets.DATABASE_USER }}
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
          TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
          TF_VAR_mysql_root_password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}
          TF_VAR_iam_user_name: ${{ secrets.IAM_USER_NAME }}
          TF_VAR_mysql_database: ${{ secrets.MYSQL_DATABASE }}
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gke_cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          TF_VAR_gke_cluster_region: ${{ secrets.GKE_CLUSTER_REGION }}
          TF_VAR_gcp_credentials_path: gcp-key.json
        run: |
          terraform plan              # Show the Terraform execution plan
          terraform apply -auto-approve   # Apply Terraform plan automatically

      - name: Get GKE Credentials
        run: |
          # Retrieve credentials for the GKE cluster
          gcloud container clusters get-credentials cat-gif-cluster --zone us-central1-a
          kubectl cluster-info        # Display cluster info for debugging

      - name: Deploy Helm Chart
        run: |
          # Apply Prometheus Operator CRD for ServiceMonitor
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
          # Deploy or upgrade the catgif application using Helm
          helm upgrade --install catgif ./catgif \
            --namespace default \
            --set image.repository=nimrod1/cat_gif_site_new \
            --set image.tag=${{ env.IMAGE_VERSION }} \
            --set service.type=LoadBalancer
            
      - name: Restart Deployment
        run: kubectl rollout restart deployment/catgif-catgif  # Restart deployment to ensure changes are applied

      # Monitoring steps follow:
      - name: Debug Kubernetes Connection
        run: kubectl get nodes    # List Kubernetes nodes for debugging

      - name: Add Prometheus Helm Repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update       # Update Helm repository information

      - name: Install Prometheus and Grafana
        run: |
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            -f catgif/values_prometheus.yaml \
            --namespace monitoring --create-namespace \
            --set grafana.service.type=LoadBalancer

      - name: Add Grafana Helm Repository
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update       # Update Grafana repository information

      - name: Install Loki
        run: |
          helm upgrade --install loki grafana/loki-stack \
            --namespace monitoring --create-namespace \
            -f catgif/values_loki.yaml

      - name: Configure Loki in Grafana
        run: kubectl apply -f catgif/loki-datasource.yaml  # Apply configuration for Loki as a data source in Grafana

      - name: Restart Grafana to Apply Config
        run: kubectl rollout restart deployment/monitoring-grafana -n monitoring  # Restart Grafana deployment
